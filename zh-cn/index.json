[{"content":" Setup Git # I should know how to do apt, after apt, we need to set up the global config.\ngit config --global user.name \u0026#34;\u0026lt;yourusername\u0026gt;\u0026#34; git config --global user.email \u0026#34;\u0026lt;youremail\u0026gt;\u0026#34; Rebase? Merge? # Basically, Merge and Rebase both give us a way to pull the published commits to local branch and keep local commits not lost. But they used different logic to make this happen, even they could come to a same endpoint.\nIn short, if we have unpublished local commits or changes, it prefers to use Rebase since it is friendly for both local repository and remote one. But if there are published commits in our branch, we should better merge or simply continue work on the existing one, and then create a PR to Merge into main branch. Only this way can keep the repository code clean and history readible. And under this circumstance, if we rebase the code, we might created multiple duplicated commits for those published commits, and that will lead to a chaotic commit history.\n","date":"February 7 2025","externalUrl":null,"permalink":"/en/posts/github-i-always-need-to-cheat-on-this/","section":"Posts","summary":"Stop searching, surfing and so on\u0026hellip; Come back check what have u did before.","title":"GitHub: I always need to cheat on this","type":"posts"},{"content":" ","date":"October 28 2024","externalUrl":null,"permalink":"/en/resume/","section":"resume","summary":"\u003cdiv class=\"max-w-full w-screen\"\u003e\n\n\n\n\n\n\n\n\n\n\n\u003cdiv class=\"pdf-viewer\" id=\"1-pdf\"\u003e\u003c/div\u003e\n\n\u003cscript\u003e\n    const viewerConfig = {\n        embedMode: \"IN_LINE\" || 'IN_LINE'\n    };\n\n    document.addEventListener(\"adobe_dc_view_sdk.ready\", function () {\n        var adobeDCView = new AdobeDC.View({\n            clientId: (window.location.hostname === \"localhost\") ? \"607b0ef0b0414456b2c2dd1d4b84c7fc\" : \"b8b2aac01f6b4210aa1046cae571e06d\",\n            divId: \"1-pdf\",\n        });\n\n        adobeDCView.previewFile({\n            content: {\n                location: {\n                    url: \"https:\\/\\/cdn.jsdelivr.net\\/gh\\/Aphcity\\/Aphcity@main\\/resume.pdf\",\n                }\n            },\n            metaData: {\n                fileName: \"resume\" || \"https:\\/\\/cdn.jsdelivr.net\\/gh\\/Aphcity\\/Aphcity@main\\/resume.pdf\"\n            }\n        }, viewerConfig);\n    });\n\u003c/script\u003e\n\u003c/div\u003e\n\u003cbody\u003e\n\u003cscript type=\"text/javascript\" src=\"https://documentservices.adobe.com/view-sdk/viewer.js\"\u003e\u003c/script\u003e\n\u003c/body\u003e","title":"resume","type":"resume"},{"content":"","date":"2024年6月19日","externalUrl":null,"permalink":"/zh-cn/","section":"Aphcity の 部落格","summary":"","title":"Aphcity の 部落格","type":"page"},{"content":"","date":"2024年6月19日","externalUrl":null,"permalink":"/zh-cn/tags/c/","section":"Tags","summary":"","title":"C","type":"tags"},{"content":"","date":"2024年6月19日","externalUrl":null,"permalink":"/zh-cn/tags/c++/","section":"Tags","summary":"","title":"C++","type":"tags"},{"content":"","date":"2024年6月19日","externalUrl":null,"permalink":"/zh-cn/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"June 19 2024","externalUrl":null,"permalink":"/en/categories/internship/","section":"Categories","summary":"","title":"Internship","type":"categories"},{"content":"","date":"2024年6月19日","externalUrl":null,"permalink":"/zh-cn/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"June 19 2024","externalUrl":null,"permalink":"/en/categories/study/","section":"Categories","summary":"","title":"Study","type":"categories"},{"content":"","date":"2024年6月19日","externalUrl":null,"permalink":"/zh-cn/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":" 为了在 8051 单片机上实现用于物联网模块的计时功能，我们需要使用到 Unix 时间戳 来对时间进行更加规范的记录和传输，但是由于 8 位单片机的特殊性，我们需要在节省空间和符合 C51 代码要求的前提下，进行时间戳转换程序的编程，这也意味着我们无法使用 C99 自带的 times.h，并对数据类型进行完美计算以防止数据的溢出\n资源整合 # 源码仓库：https://github.com/Aphcity/timestamp\nUnix 时间戳 在线转换工具：https://tool.lu/timestamp/\n在 Windows 下算法的创建 # 适用于 Windows 等 32/64 位机的源码：Branch 6022208\n统一使用时间结构体 TS_time_ 来表示 RTC 时间格式\nUnix 时间戳 转换为 RTC 时间格式 # time_struct stamptotime(uint32_t stamp) { const uint8_t month_buf[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; time_struct t_out; uint32_t min_add, hour_add, day_add, mon_add, year_add, day_temp, year_temp; t_out.h_year = 19; t_out.l_year = 70; t_out.mon = 1; t_out.day = 1; t_out.hour = 0; t_out.min = 0; t_out.sec = 0; min_add = (t_out.sec + stamp) / 60; t_out.sec = (t_out.sec + stamp) % 60; hour_add = (t_out.min + min_add) / 60; t_out.min = (t_out.min + min_add) % 60; day_add = (t_out.hour + hour_add) / 24; t_out.hour = (t_out.hour + hour_add) % 24; mon_add = 0; day_temp = t_out.day; for (int i = t_out.mon - 1;; i++) { size_t a = i % 12; year_temp = t_out.h_year * 100 + t_out.l_year + (i / 12); size_t temp = (a == 1 \u0026amp;\u0026amp; leapyear_check(year_temp)) ? (month_buf[a] + 1) : month_buf[a]; /* If we update the month, initial the day to the \u0026#39;1\u0026#39; */ if (mon_add) day_temp = 1; if (day_add + day_temp \u0026gt; temp) { mon_add++; day_add -= (temp - day_temp + 1); } else { t_out.day += day_add; break; } } year_add = (t_out.mon + mon_add) / 12; t_out.mon = (t_out.mon + mon_add) % 12; // 大于30年时重置基准至2000年1月1日0时0分0秒 if (year_add \u0026gt; 30) { year_add -= 30; t_out.h_year = 20 + year_add / 100; year_add = year_add % 100; t_out.l_year = 0; } else t_out.h_year = 19; t_out.l_year += year_add; return t_out; } 其中， month_buf 用于存放正常年份的每月天数，leapyear_check 来保证能够稳定判断闰年多出的那一天能够被正确计算在内。\n逻辑和排错 # 先计算无需复杂计算的 秒，分，时部分，简单取余即可\n计算到日期部分，可以先计算出增加的天数，之后开始通过反复遍历 month_buf 来得到经过的年份、月份，得到最后的年增量，以及月增量\n这里由于在处理大于30年的增量时，发现原本的代码（如下）在处理时，会导致输出的低位年份会产生溢出，这是因为在计算中年增量是逢百进一的，而起始的年份是1970年，低位年份 70 在处理 30+ 的数据时，会增加成 100+ 的数据。这里有两种解决办法，在进行加法后，再次对低位年份进行检查，大于 100 选择进位到高位；提前进行年增量的判断，当增量大于等于 30 年时，直接对高位加一，同时增量减少 30，相当于将时间戳的初始基准重置到了 2000 年，这样更容易理解，因此选择了后者\n在处理实际时间月份处于12月时，由于 12n % 12 == 0，因此，12 月会直接被进位，导致年份加一，同时月份变成 0 月，因此增加条件判断，保证 12 月不被进位\nRTC 时间格式 转换为 Unix 时间戳 # 这部分相较转换为 RTC 要相对简单，逻辑方面是类似的\nuint32_t timetostamp(time_struct t_in) { const uint8_t month_buf[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}; uint32_t stamp = 0; uint32_t year = t_in.h_year * 100 + t_in.l_year; // 计算已过年的秒数 for (uint32_t y = 1970; y \u0026lt; year; y++) stamp += leapyear_check(y) ? 366 * 86400 : 365 * 86400; // 计算已过月的秒数 for (uint8_t m = 0; m \u0026lt; t_in.mon - 1; m++) if (m == 1 \u0026amp;\u0026amp; leapyear_check(year)) // February in a leap year stamp += 29 * 86400; else stamp += month_buf[m] * 86400; // 计算已过天的秒数 stamp += (t_in.day - 1) * 86400; // 计算已过时分秒的秒数 stamp += t_in.hour * 3600; stamp += t_in.min * 60; stamp += t_in.sec; // 返回 int return stamp; } 逻辑 # 先把年份增量对应的秒数增量算出，这个可以直接计算，但是要注意闰年会多出一年，然后计算得到从1月开始经历的完整月份，及其包含的天数总和，之后将天数、小时数、分钟数对应的秒增量，以及秒本身，整合加起来，即可得到结果。\n逻辑简单，相比上一个函数，也不容易出现计算或思维上的疏漏，并没有在 debug 过程中发现错误\n移植 Keil # 在 C51 中，short 和 int 的类型大小是相同的，均为16字节大小，这也导致之后在 Keil 转移编程时，产生了数据溢出，最后使用了 unsigned long 作为 32 位无符号整数的储存方式，这里附上 C51 中基本通用的数据类型大小参考\nData Types Bits Bytes Minium Value Maxium Value bit 1 0 1 signed char 8 1 -128 127 unsigned char 8 1 0 255 enum 8 / 16 1 / 2 -128 / -32768 +127 / +32767 signed short int 16 2 -32768 +32767 unsigned short int 16 2 0 65535 signed int 16 2 -32768 +32767 unsigned int 16 2 0 65535 signed long int 32 4 -2147483648 +2147483647 unsigned long int 32 4 0 4294967295 float 32 4 ±1.175494E-38 ±3.402823E+38 double 32 4 ±1.175494E-38 ±3.402823E+38 sbit 1 0 1 sfr 8 1 0 255 sfr16 16 2 0 65535 ","date":"2024年6月19日","externalUrl":null,"permalink":"/zh-cn/posts/unix-%E6%97%B6%E9%97%B4%E6%88%B3%E5%9C%A8-keil-c51-%E4%B8%AD%E7%9A%84%E5%AE%9E%E7%8E%B0/","section":"Posts","summary":"\u003cblockquote\u003e\n\u003cp\u003e为了在 8051 单片机上实现用于物联网模块的计时功能，我们需要使用到 \u003ca\n  href=\"https://zh.wikipedia.org/wiki/UNIX%E6%97%B6%E9%97%B4\"\n    target=\"_blank\"\n  \u003eUnix 时间戳\u003c/a\u003e 来对时间进行更加规范的记录和传输，但是由于 8 位单片机的特殊性，我们需要在节省空间和符合 C51 代码要求的前提下，进行时间戳转换程序的编程，这也意味着我们无法使用 C99 自带的 \u003ccode\u003etimes.h\u003c/code\u003e，并对数据类型进行完美计算以防止数据的溢出\u003c/p\u003e","title":"Unix 时间戳在 Keil C51 中的实现","type":"posts"},{"content":"","date":"2024年6月19日","externalUrl":null,"permalink":"/zh-cn/categories/%E5%AE%9E%E4%B9%A0/","section":"Categories","summary":"","title":"实习","type":"categories"},{"content":"","date":"2024年6月19日","externalUrl":null,"permalink":"/zh-cn/categories/%E5%AD%A6%E4%B9%A0/","section":"Categories","summary":"","title":"学习","type":"categories"},{"content":"\r0\r功德\r按下Space或点击积攒功德\r","date":"2024年3月18日","externalUrl":null,"permalink":"/zh-cn/toolbox/woodenfish/","section":"Toolboxes","summary":"\u003chead\u003e\r\n    \u003clink rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/gh/Aphcity/aphcity-assets@master/woodenfish/style.min.css\"\u003e\r\n    \u003cscript src = \"https://kit.fontawesome.com/a7b16cfbd0.js\" crossorigin=\"anonymous\"\u003e\u003c/script\u003e\r\n    \u003cscript src = \"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js\"\u003e\u003c/script\u003e\r\n    \u003cscript src=\"https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js\"\u003e\u003c/script\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n    \u003cdiv class=\"centerContent\"\u003e\r\n        \u003cdiv id=\"top\"\u003e\r\n            \u003cdiv class=\"score\"\u003e\r\n                \u003cdiv class=\"count\"\u003e0\u003c/div\u003e\r\n                \u003cdiv class=\"subtitle\"\u003e 功德\u003c/div\u003e\r\n            \u003c/div\u003e\r\n        \u003c/div\u003e\r\n        \u003cdiv id=\"center\"\u003e\r\n            \u003csvg class=\"woodenfish\" viewBox=\"0 0 1365 1024\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"266.6015625\" height=\"200\"\u003e\u003cpath fill=\"#eeeeee\" opacity=\"1.00\" d=\"M1.450653 780.39695c-10.175905 64.255398 36.031662 101.161718 59.626108 112.361614 23.594445 11.178562 63.274073 0 78.825927 0 116.542907 11.178562 366.759228 131.220103 678.606972 131.220103 0 0 504.635269 7.445264 543.31224-360.487287 9.19458-95.529771 4.885288-277.458732-71.039334-286.162651-63.956734-8.426588-102.121709 4.074628-183.315615 20.565141-53.908828 10.922564-189.011561 29.973052-212.926004 44.970245-260.989553 118.718887-403.324219 204.371417-442.299853 217.128631-29.439724 0-54.975485-7.359931-62.100752-69.972677 0-25.706426 98.089747-87.039184 140.137353-96.959091C682.660267 452.869354 796.365867 435.333519 809.720409 435.333519c19.263819 0 441.489194-101.588381 454.438406-111.188291 12.949212-9.59991 26.62375-18.986489 26.623751-52.543508 0-15.359856-33.813016-49.663534-72.319322-91.455142-45.674238-49.556869-99.94573-107.092329-140.606682-120.788201C1002.934597 20.958737 856.077308-10.912964 727.779844 3.572233 446.929143 35.273269 271.677453 342.662388 256.424263 363.995521c-64.852725 90.708483-116.542907 205.587406-143.678653 256.296264C86.548522 669.272659 11.71189 735.149375 1.450653 780.39695z\" p-id=\"2023\"\u003e\u003c/path\u003e\u003c/svg\u003e\r\n        \u003c/div\u003e\r\n        \u003cdiv id=\"bottom\"\u003e\r\n            \u003cdiv class=\"keyTips\"\u003e\r\n                按下\u003ckey\u003eSpace\u003c/key\u003e或\u003ckey\u003e点击\u003c/key\u003e积攒功德\r\n            \u003c/div\u003e\r\n        \u003c/div\u003e\r\n    \u003c/div\u003e\r\n\u003c/body\u003e\r\n\u003cscript src=\"https://cdn.jsdelivr.net/gh/Aphcity/aphcity-assets@master/woodenfish/main.min.js\"\u003e\u003c/script\u003e","title":"","type":"toolbox"},{"content":"","date":"2024年3月18日","externalUrl":null,"permalink":"/zh-cn/categories/toolbox/","section":"Categories","summary":"","title":"Toolbox","type":"categories"},{"content":"","date":"2024年3月18日","externalUrl":null,"permalink":"/zh-cn/tags/toolbox/","section":"Tags","summary":"","title":"Toolbox","type":"tags"},{"content":"","date":"2024年3月18日","externalUrl":null,"permalink":"/zh-cn/toolbox/","section":"Toolboxes","summary":"","title":"Toolboxes","type":"toolbox"},{"content":"","date":"2023年6月23日","externalUrl":null,"permalink":"/zh-cn/tags/clash/","section":"Tags","summary":"","title":"Clash","type":"tags"},{"content":"","date":"2023年6月23日","externalUrl":null,"permalink":"/zh-cn/tags/%E6%9C%BA%E5%9C%BA/","section":"Tags","summary":"","title":"机场","type":"tags"},{"content":"","date":"2023年6月23日","externalUrl":null,"permalink":"/zh-cn/categories/%E6%95%99%E7%A8%8B/","section":"Categories","summary":"","title":"教程","type":"categories"},{"content":"切勿翻牆从事违法行为，否则后果自负！\n遵守中国互联网法，做一个遵纪守法的好公民。\n声明：本人分享教程、软件，仅限于科学研究和学习使用\n前言 # 黑话解释 # 我们科学上网的主要目的，是为了工作、学习、查找文献等用途，许多国外的博客、社交媒体、文献、媒体、编程等，都是最先进的，我们需要走出国门看一看，丰富自己的学识。\n什么是机场？ # 其实这个很好解释，大约两坤年之前，我们常用的 SS/SSR 客户端很多都采用类似于纸飞机的图标。所以我们有时也把这类软件和它们的衍生版叫做小飞机。这些软件都会使用到节点，也就是线路。可以把它们当作可以自定义线路的高级 微PN ，但它们确实不是 微PN 。而 机场 则可以认为是节点服务的提供商。大致就这样。\n什么是猫？ # Clash，多的不谈，🐱不可爱吗\n订阅源推荐与对比 # 鉴于我目前的使用体验，主要推荐两个机场给家人们，两个机场各有所长，也能很好的互补，真的真的是促进学习的利器哦\n大机场 Big Airport 优势 量大，便宜 量真的大，真的便宜 速度稳定 Twitch, YouTube 稳定4K 节点丰富 常用国家加速节点 劣势 各节点均无法链接 ChatGPT（IP被ban） 可流畅使用 Bing Chat 偶尔需要重新返回官网进行订阅 极少数情况 部分网络运营商可能无法连接 山西移动 4/5G 同位置联通可用，同运营商流量北京可用 订阅类型单一 便宜大量，你还想让给你整什么花活 要什么自行车 Sakura Cat 一个提供网络加速服务的简单小铺 优势 订阅稳定 订阅类型丰富，可针对不同人群购买 速度稳定 节点丰富 全球加速节点 流媒体，游戏加速节点（流量倍率计算） Steam 等购物服务低价区节点 劣势 流量不如大机场多 价格不如大机场便宜 套餐比较 # 机场 大机场 套餐 一点点流量订阅 有点多流量订阅 亿点点流量订阅 流量上限 1024G/月 2048G/月 4096G/月 节点数量 \u0026#127469;\u0026#127472; \u0026#127471;\u0026#127477; \u0026#127472;\u0026#127479; \u0026#127480;\u0026#127468; \u0026#127482;\u0026#127480; 设备限制 无 价格 \u0026yen;\u0026nbsp;4.99/月\n\u0026yen;\u0026nbsp;49.9/年 \u0026yen;\u0026nbsp;6.99/月\n\u0026yen;\u0026nbsp;69.9/年 \u0026yen;\u0026nbsp;9.99/月\n\u0026yen;\u0026nbsp;99.9/年 推荐程度 \u0026#11088;\u0026#11088;\u0026#11088;\u0026#11088;\u0026#11088; \u0026#11088; \u0026#11088; ","date":"2023年6月23日","externalUrl":null,"permalink":"/zh-cn/posts/%E4%B8%80%E4%BA%9B%E8%87%AA%E7%94%A8%E6%9C%BA%E5%9C%BA%E5%88%86%E4%BA%AB%E5%8F%8A%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/","section":"Posts","summary":"\u003cp\u003e\u003cstrong\u003e切勿翻牆从事违法行为，否则后果自负！\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e遵守中国互联网法，做一个遵纪守法的好公民。\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e声明：本人分享教程、软件，仅限于科学研究和学习使用\u003c/strong\u003e\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003e前言\n    \u003cdiv id=\"前言\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"text-primary-300 dark:text-neutral-700 !no-underline\" href=\"#%e5%89%8d%e8%a8%80\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e\n    \n\u003c/h2\u003e\n\n\u003ch3 class=\"relative group\"\u003e黑话解释\n    \u003cdiv id=\"黑话解释\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"text-primary-300 dark:text-neutral-700 !no-underline\" href=\"#%e9%bb%91%e8%af%9d%e8%a7%a3%e9%87%8a\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e\n    \n\u003c/h3\u003e\n\u003cp\u003e我们科学上网的主要目的，是为了工作、学习、查找文献等用途，许多国外的博客、社交媒体、文献、媒体、编程等，都是最先进的，我们需要走出国门看一看，丰富自己的学识。\u003c/p\u003e","title":"一些自用机场分享及使用教程","type":"posts"},{"content":" 心血来潮，因为好像最近的家人们有很多想要自己独立科学上网的，为了玩的，为了学的，为了看的，有点多，统一省事，也给博客加点养分，整理一下，也能有人再来问，能当甩手掌柜，以后直接用😝\n前言 # 🚩Clash：一个 Go 语言开发的多平台代理客户端。GitHub\n🚩ClashX: Clash 的 Mac 图形客户端。GitHub\n🚩Clash For Android: Clash 的 Android 图形客户端。GitHub\n🚩Clash for Windows: Clash 的 Windows/macOS/Linux 图形客户端。GitHub\nClash 算是近两年来比较高性能的代理软件，其支持 vmess, ss, ssr 等协议，通过自己的 core 来实现的相关代理协议。\n这篇文章是配合机场使用订阅的一个教程，很基础的一个使用教程。Clash for Windows 是代理工具 Clash 在 Windows 系统的唯一图形客户端，早期Clash for Windows只有 Windows 端，因此而得名。但目前早已支持 Windows、macOS、Linux 三大平台，功能强大且支持多种代理协议，如 Shadowsocks(SS)、ShadowsocksR(SSR)、Socks、Snell、V2Ray、Trojan、https 等代理协议。\n下载和安装 # 官网下载 # Clash for Windows 官网下载地址：GitHub Releases 新手使用建议下载稳定版本，即版本号后标记为 Latest 的版本。\n本文编辑时为上图所示，根据本身系统及CPU架构选择下载的文件，一般而言，对于 家用 的 64位 Windows 操作系统，选择 Clash.for.Windows.Setup.**.**.**.exe 下载即可\n文件名 说明 Clash.for.Windows-0.20.27-arm64-linux.tar.gz Linux ARM 64位 版本 压缩包 Clash.for.Windows-0.20.27-arm64-mac.7z Mac ARM 64位 版本 压缩包 Clash.for.Windows-0.20.27-arm64-win.7z Windows ARM 64位 版本 压缩包 Clash.for.Windows-0.20.27-arm64.dmg Mac ARM 64位 版本 安装包 Clash.for.Windows-0.20.27-ia32-win.7z Windows 32位 版本 压缩包 Clash.for.Windows-0.20.27-mac.7z Mac 64位 版本 压缩包 Clash.for.Windows-0.20.27-win.7z Windows 64位 版本 压缩包 Clash.for.Windows-0.20.27-x64-linux.tar.gz Linux 64位 版本 压缩包 Clash.for.Windows-0.20.27.dmg Mac 64位 版本 安装包 Clash.for.Windows.Setup.0.20.27.arm64.exe Windows ARM 64位 版本 安装包 Clash.for.Windows.Setup.0.20.27.exe Windows 64位 版本 安装包 Clash.for.Windows.Setup.0.20.27.ia32.exe Windows 32位 版本 安装包 sha256sum 检测文件完整性的命令 Source code (zip) 源文件压缩包 zip 版本 Source code (tar.gz) 源文件压缩包 tar.gz 版本 下载完成后，打开进行安装。\n使用 # 安装完成，首先跳转至 Profiles 选项卡下，点击 Download 左侧的文本框，或点击框内的粘贴图标，将先前准备好的 订阅链接 复制到文本框内，之后点击 Download 即可将 订阅 导入到 Clash For Windows 中。\n之后，打开主界面，应当与上图大体一致，并且建议将面板勾选至与上述一致。具体选项会在之后介绍。\n","date":"2023年6月21日","externalUrl":null,"permalink":"/zh-cn/posts/clash-for-windows-%E4%BD%BF%E7%94%A8%E5%85%A8%E6%95%99%E7%A8%8B/","section":"Posts","summary":"\u003cblockquote\u003e\n\u003cp\u003e心血来潮，因为好像最近的家人们有很多想要自己独立科学上网的，为了玩的，为了学的，为了看的，有点多，统一省事，也给博客加点养分，整理一下，也能有人再来问，能当甩手掌柜，以后直接用😝\u003c/p\u003e","title":"Clash For Windows 使用全教程","type":"posts"},{"content":"\r","date":"2023年2月14日","externalUrl":null,"permalink":"/zh-cn/music/","section":"","summary":"\u003chead\u003e\r\n  \u003c!-- require APlayer --\u003e\r\n  \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/Aphcity/aphcity-assets@master/aplayer/css/APlayer.min.css\"\u003e\r\n  \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.jsdelivr.net/gh/Aphcity/aphcity-assets@master/aplayer/css/hugomain.min.css\"\u003e\r\n  \u003c!-- \u003clink rel=\"stylesheet\" type=\"text/css\" href=\"../../css/main.css\"\u003e --\u003e\r\n\u003c/head\u003e\r\n\u003cbody\u003e\r\n\u003cdiv id=\"music_bg\"\u003e\u003c/div\u003e\r\n\u003cdiv id=\"heoMusic-page\"\u003e\r\n  \u003cmeting-js id=\"2245723001\" server=\"netease\" type=\"playlist\" mutex=\"true\" preload=\"auto\" order=\"random\" volume=\"0.5\"\u003e\u003c/meting-js\u003e\r\n\u003c/div\u003e\r\n\u003c!-- require APlayer --\u003e\r\n\u003cscript src=\"https://cdn.jsdelivr.net/gh/Aphcity/aphcity-assets@master/aplayer/js/APlayer.min.js\"\u003e\u003c/script\u003e\r\n\u003c!-- require MetingJS --\u003e\r\n\u003cscript src=\"https://cdn.jsdelivr.net/gh/Aphcity/aphcity-assets@master/aplayer/js/Meting2.min.js\"\u003e\u003c/script\u003e\r\n\u003cscript async data-pjax src=\"https://cdn.jsdelivr.net/gh/Aphcity/aphcity-assets@master/aplayer/js/main.min.js\"\u003e\u003c/script\u003e\r\n\u003c/body\u003e","title":"","type":"music"},{"content":"","date":"2022年12月30日","externalUrl":null,"permalink":"/zh-cn/tags/hexo/","section":"Tags","summary":"","title":"Hexo","type":"tags"},{"content":" 全记录，旨在能够找到回家的路。\n环境配置 # Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装 Hexo 相当简单，只需要先安装下列应用程序即可：\nNode.js (Node.js 版本需不低于 10.13，建议使用 Node.js 12.0 及以上版本) Git Git # 安装 # 对于中国大陆地区用户，可以前往 淘宝 Git for Windows 镜像 下载 git 安装包。\nWindows：下载并安装 git. Mac：使用 Homebrew, MacPorts 或者下载 安装程序。 Linux (Ubuntu, Debian)：sudo apt-get install git-core Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core 配置Git与GitHub # 此处为全局配置，所以可以在任意位置打开git bash，设置用户名称和邮件地址。\ngit config --global user.name \u0026#34;\u0026lt;yourusername\u0026gt;\u0026#34; git config --global user.email \u0026#34;\u0026lt;youremail\u0026gt;\u0026#34; 设置完成后为了能够在本地使用git管理github上的项目，需要绑定SSHkey。\nssh-keygen -t rsa -C \u0026lt;youremail\u0026gt; # -C后面加你在github的用户名邮箱，这样公钥才会被github认可 less ~/.ssh/id_rsa.pub # 查看公钥内容稍后加入Github账户的sshkey中, 打开 GitHub网页\n单击头像-\u0026gt;settings,在设置页面找到SSH and GPG keys，单击New SSH key新建SSH KEY。\n保存后，在git bash测试SSH KEY是否添加成功，输入\nssh -T git@github.com # Attempts to ssh to GitHub 正常的输出结果是：\nThe authenticity of host \u0026#39;github.com (207.97.227.239)\u0026#39; can\u0026#39;t be established. RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48. Are you sure you want to continue connecting (yes/no)? # 此处请输入yes Hi username! You\u0026#39;ve successfully authenticated, but GitHub does not provide shell access. Node.js # 安装 # Node.js 为大多数平台提供了官方的 安装程序。对于中国大陆地区用户，可以前往 淘宝 Node.js 镜像 下载。\n其它的安装方法：\nWindows：通过 nvs（推荐）或者 nvm 安装。 Mac：使用 Homebrew 或 MacPorts 安装。 Linux（DEB/RPM-based）：从 NodeSource 安装。 其它：使用相应的软件包管理器进行安装，可以参考由 Node.js 提供的 指导。 对于 Mac 和 Linux 同样建议使用 nvs 或者 nvm，以避免可能会出现的权限问题。\n安装 Hexo # 所有必备的应用程序安装完成后，首先需要建立博客文件夹，建议建在非系统盘，例如D:/Hexo/，那么这个目录就是我们博客的根目录了。因为每个人的命名习惯不同，本帖之后会以[Blogroot]指代博客根目录。\n使用npm安装Hexo,在[Blogroot]路径下右键-\u0026gt;Git Bash Here，输入\nnpm config set registry https://registry.npmmirror.com #将npm源替换为阿里的镜像。之后的安装就会迅速很多了。 npm install hexo-cli -g # hexo-cli 是 hexo的指令集。 hexo init # 有了指令集以后，使用它的初始化指令来初始化安装Hexo博客。 安装插件，依然是在[Blogroot]路径下右键-\u0026gt;Git Bash Here，使用npm指令挑选需要的插件安装。(请仔细阅读注释，确定你是否需要安装这个插件)。\nnpm install hexo-admin --save # 网页端hexo文档管理插件，如无需求，可跳过 npm install hexo-deployer-git --save # git部署插件，必须安装 npm install hexo-renderer-stylus --save # nib css支持插件，如无需求，可跳过 npm install hexo-generator-feed --save # RSS订阅支持插件，如无需求，可跳过 npm install hexo-generator-sitemap --save # sitemap生成插件，帮助搜索引擎抓取，如无需求，可跳过 Hexo Bash常用命令\nhexo clean #清空缓存 hexo generate hexo g #简写 #重新编译 hexo server hexo s #简写 #打开本地访问 hexo new \u0026lt;layout\u0026gt; \u0026#34;文章title\u0026#34; #新建文章 hexo deploy hexo d #简写 #部署到云端 首次本地预览：在[Blogroot]路径下右键-\u0026gt;Git Bash Here，输入\nhexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo s 然后在浏览器中打开localhost:4000，就能看到博客首页了。\n如果你安装了hexo-admin插件，就可以通过访问 localhost:4000/admin 来管理你的文章了。并且在可视化界面中操作文章内容。恭喜你，博客的本地部署到这里算是告一段落了。\n部署到GitHub # 新建username.github.io仓库：\n在GitHub首页单击头像-\u0026gt;Your repositories 在自己的 GitHub 账号下创建一个新的仓库，命名为 aphcity.github.io。\n配置hexo部署插件内容：\n确保你安装了hexo-deployer-git,如果没有，在[Blogroot]路径下右键-\u0026gt;Git Bash Here，输入： npm install hexo-deployer-git --save 打开[Blogroot]/_config.yml,修改底部的deploy配置项。如果没有找到deploy配置项,则自己添加： # 站点部署到github要配置Deployment ## Docs: https://zespia.tw/hexo/docs/deploy.html deploy: type: git repo: github: url: git@github.com:Aphcity/aphcity.github.io.git # username为自己的用户名 branch: gh-page # 亦可以使用默认分支为main，注意修改 把本地hexo博客内容提交到git仓库\n若以上内容已经准确配置，在[Blogroot]路径下右键-\u0026gt;Git Bash Here，输入： hexo clean \u0026amp;\u0026amp; hexo g \u0026amp;\u0026amp; hexo d 不出意外，就可以在浏览器上输入https://aphcity.github.io访问你的博客了。 安装 Butterfly # 稳定版【建议】\n在[Blogroot]路径下右键-\u0026gt;Git Bash Here，输入：\ngit clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly 测试版\n测试版可能存在 bug，追求稳定的请安装稳定版\n如果想要安装比较新的 dev 分支，可以\ngit clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly 升级方法：在主题目录下，运行 git pull\n应用主题 # 修改 Hexo 根目录下的 _config.yml，把主题改为 butterfly\ntheme: butterfly 安装插件 # 如果你没有 pug 以及 stylus 的渲染器，请下载安装：\nnpm install hexo-renderer-pug hexo-renderer-stylus --save 升级建议 # 在[Blogroot]路径下创建一个文件 _config.butterfly.yml，并把主题目录的 _config.yml 内容复制到 _config.butterfly.yml 去。( 注意: 复制的是主题的 _config.yml ,而不是 hexo 的 _config.yml)\n同时，为了防止出现诸如 git commit 内容是主题文档的 git commit history 的错误，打开[Blogroot]\\.gitgnore，手动添加 themes/butterfly/.git，一劳永逸\n博客配置 # 您可以在 _config.yml 中修改大部分的配置。\n网站 # 参数 描述 title 网站标题 subtitle 网站副标题，告诉搜索引擎一个关于您站点的简单描述 description 网站描述 keywords 网站的关键词。支持多个关键词。 author 您的名字 language 网站使用的语言。对于简体中文用户来说，使用不同的主题可能需要设置成不同的值，请参考你的主题的文档自行设置，常见的有 zh-Hans和 zh-CN。 timezone 网站时区。Hexo 默认使用您电脑的时区。对于中国大陆地区可以使用 Asia/Shanghai。 title: Aphcity の 窝 subtitle: \u0026#34;树洞日记\u0026#34; description: \u0026#34;无所事事所以充满动力\u0026#34; keywords: author: Aphcity language: zh-CN timezone: \u0026#34;Asia/Shanghai\u0026#34; 网址 # 参数 描述 默认值 url 网址, 必须以 http:// 或 https:// 开头 permalink 文章的 永久链接 格式 :year/:month/:day/:title/ permalink_defaults 永久链接中各部分的默认值 pretty_urls.trailing_index 是否在永久链接中保留尾部的 index.html，设置为 false 时去除 TRUE pretty_urls.trailing_html 是否在永久链接中保留尾部的 .html, 设置为 false 时去除 (对尾部的 index.html无效) TRUE url: https://aphcity.github.io/ permalink: :year/:month/:day/:title/ permalink_defaults: pretty_urls: trailing_index: true # Set to false to remove trailing \u0026#39;index.html\u0026#39; from permalinks trailing_html: true # Set to false to remove trailing \u0026#39;.html\u0026#39; from permalinks 域名配置 # 为了能够使用自己的域名访问我们的博客，需要再进行域名绑定：\n首先要获取博客当前默认域名的IP,打开cmd或者powershell，输入：\nping aphcity.github.io 获取到的ip地址填入域名解析。进入解析页面后需要添加两条记录。\n主机记录 类型 记录值 @ A ip www CNAME aphcity.github.io 在[Blogroot]\\source\\目录下新建CNAME文件（注意不要有后缀名，就叫CNAME即可，什么.txt、.js之类的后缀都不能有），在CNAME文件中添加上你购买的域名。\naphcity.cyou 配置username.github.io仓库。\n打开username.github.io，点击仓库页面右上角的 setting，下拉找到 Github Pages 栏，在 Custom domain 中填入你购买的域名。\n最后，重新部署一下 hexo 即可通过你的域名来访问博客了\n永久链接配置 # Hexo URL 的默认规则是 年/月/日/标题，这样其实不利于SEO。\nHexo文章的url在博客根目录的_config.yml中进行配置，默认配置如下：\npermalink: :year/:month/:day/:title/ 这里的:title为source/_post下的相对路径，但是这样的话很容易造成url中文乱码，和不同浏览器因为字符集的问题导致的url失效。\n这里建议尽量不使用默认配置，推荐使用如下采用 hash 值的方案：\n直接修改_config.yml为：\npermalink: :category/:hash/ 这样每次生成文章url，会自动生成hash值，保证不重复且不会因为编码出错。\nAlgolia 搜索 # 你需要安装 hexo-algolia ，根据它们的说明文档去做相应的配置。\n安装 hexo-algolia\nnpm install --save hexo-algolia 修改 _config.butterfly.yml\nalgolia_search: enable: true hits: per_page: 6 注册登录 Algolia官网 ，或者直接用GitHub账号登陆\n新建一个 index\n左侧侧边栏找到 API Keys，进入后，点击 ALL API Keys，这点比较重要，因为前面的API不可用，要自己新建一个拥有增加删除权限的api key\n点击 New API Key，如图所示，重要的是在ACL里面增加删除和新增Object的权限，然后填上 indices 栏目中的 index name，可以选刚才你创建的那个 index ，其余默认就行。\n这样你就有了一个 API Key。\n修改 _config.yml\n注意 apikey 填写刚才你创建的那个有权限的，其余的在 Your API Keys 里面可以找到\nalgolia: applicationID: \u0026#39;applicationID\u0026#39; # Your Algolia Application ID apiKey: \u0026#39;apiKey\u0026#39; # A **Search-Only** API key adminApiKey: \u0026#39;your adminApiKey\u0026#39; indexName: \u0026#39;...\u0026#39; # The name of the Algolia index to use chunkSize: 5000 上传数据到 algolia，下面 your apiKey 替换为刚才自己创建拥有权限的api\nexport HEXO_ALGOLIA_INDEXING_KEY=your apiKey hexo algolia 看到如下信息，证明成功了，可以去 Algolia 网站上查看，索引已经上传成功了。\nINFO [Algolia] Testing HEXO_ALGOLIA_INDEXING_KEY permissions. INFO Start processing INFO [Algolia] Identified 5 pages and posts to index. INFO [Algolia] Indexing chunk 1 of 1 (50 items each) INFO [Algolia] Indexing done. Katex 配置 # 测试：$f\u0026rsquo;(x)$\n首先禁用 MathJax（如果你配置过 MathJax 的话），然后修改你的主题配置文件以便加载 katex.min.css :\nkatex: enable: true # true 表示每一页都加载katex.js # false 需要时加载，须在使用的Markdown Front-matter 加上 katex: true per_page: false hide_scrollbar: true 你不需要添加 katex.min.js 来渲染数学方程。相应的你需要卸载你之前的 hexo 的 markdown 渲染器，然后安装其它插件。\n卸载掉 marked 插件，安装 hexo-renderer-markdown-it\nnpm un hexo-renderer-marked --save npm un hexo-renderer-kramed --save npm i hexo-renderer-markdown-it --save npm install @neilsustc/markdown-it-katex --save 在 hexo 的根目录的 _config.yml 中配置\nmarkdown: plugins: - plugin: name: \u0026#39;@neilsustc/markdown-it-katex\u0026#39; options: strict: false Twikoo 评论系统 # Twikoo 是一个简洁、安全、无后端的静态网站评论系统，基于腾讯云开发。\n具体如何配置评论，请查看 Twikoo文档\n你只需要把获取到的 环境ID (envId) 填写到配置上去就行\n修改 _config.butterfly.yml\ntwikoo: envId: # 环境 ID region: # 环境地域，默认为 ap-shanghai visitor: false # 是否显示文章閲读数，开启 visitor 后，文章页的访问人数将改为 Twikoo 提供，而不是 不蒜子 option: # 可选配置 Git-Calendar # 安装插件,在博客根目录[Blogroot]下打开终端，运行以下指令：\nnpm install hexo-filter-gitcalendar --save 添加配置信息，在站点配置文件 _config.yml 或者主题配置文件如 _config.butterfly.yml 中添加：\n# hexo-filter-gitcalendar # see https://akilar.top/posts/1f9c68c9/ gitcalendar: enable: true # 开关 priority: 5 #过滤器优先权 enable_page: / # 应用页面 # butterfly挂载容器 layout: # 挂载容器类型 type: id name: recent-posts index: 0 user: Aphcity #git用户名 apiurl: \u0026#34;https://gitcalendar.aphcity.cyou\u0026#34; minheight: pc: 280px #桌面端最小高度 mobile: 100px #移动端最小高度 color: \u0026#34;[\u0026#39;rgba(139, 141, 145, 0.25)\u0026#39;, \u0026#39;#9be9a8\u0026#39;, \u0026#39;#8ddb9c\u0026#39;, \u0026#39;#80ce8f\u0026#39;, \u0026#39;#72c083\u0026#39;, \u0026#39;#65b277\u0026#39;, \u0026#39;#57a56a\u0026#39;, \u0026#39;#4a975e\u0026#39;, \u0026#39;#3c8952\u0026#39;, \u0026#39;#2f7c45\u0026#39;, \u0026#39;#216e39\u0026#39;]\u0026#34; # 适配夜间模式的仿 GitHub 配色 container: .recent-post-item(style=\u0026#39;width:100%;height:auto;padding:10px;\u0026#39;) #父元素容器，需要使用pug语法 gitcalendar_css: https://npm.elemecdn.com/hexo-filter-gitcalendar/lib/gitcalendar.css gitcalendar_js: https://npm.elemecdn.com/hexo-filter-gitcalendar/lib/gitcalendar.js 页脚计时器和页脚徽标 # 安装插件,在博客根目录[Blogroot]下打开终端，运行以下指令：\nnpm install hexo-butterfly-footer-beautify --save 添加配置信息，在站点配置文件_config.yml或者主题配置文件_config.butterfly.yml中添加\n# footer_beautify # 页脚计时器：[Native JS Timer](https://akilar.top/posts/b941af/) # 页脚徽标：[Add Github Badge](https://akilar.top/posts/e87ad7f8/) footer_beautify: enable: timer: true # 计时器开关 bdage: true # 徽标开关 priority: 5 #过滤器优先权 enable_page: all # 应用页面 exclude: # 屏蔽页面 # - /posts/ # - /about/ layout: # 挂载容器类型 type: id name: footer-wrap index: 0 # 计时器部分配置项 runtime_js: /js/runtime.js runtime_css: https://npm.elemecdn.com/hexo-butterfly-footer-beautify@1.0.0/lib/runtime.css # 徽标部分配置项 swiperpara: 3 #若非0，则开启轮播功能，每行徽标个数 bdageitem: - link: https://hexo.io/ #徽标指向网站链接 shields: https://img.shields.io/badge/Frame-Hexo-blue?style=for-the-badge\u0026amp;logo=hexo #徽标API message: 博客框架为Hexo_v5.4.1 #徽标提示语 - link: https://butterfly.js.org/ shields: https://img.shields.io/badge/Theme-Butterfly-6513df?style=for-the-badge\u0026amp;logo=bitdefender message: 主题版本Butterfly_v4.0.1 - link: https://www.jsdelivr.com/ shields: https://img.shields.io/badge/CDN-jsDelivr-orange?style=for-the-badge\u0026amp;logo=jsDelivr message: 本站使用JsDelivr为静态资源提供CDN加速 # - link: https://vercel.com/ # shields: https://img.shields.io/badge/Hosted-Vercel-brightgreen?style=for-the-badge\u0026amp;logo=Vercel # message: 本站采用双线部署，默认线路托管于Vercel # - link: https://vercel.com/ # shields: https://img.shields.io/badge/Hosted-Coding-0cedbe?style=for-the-badge\u0026amp;logo=Codio # message: 本站采用双线部署，联通线路托管于Coding - link: https://github.com/ shields: https://img.shields.io/badge/Source-Github-d021d6?style=for-the-badge\u0026amp;logo=GitHub message: 本站项目由Github托管 - link: http://creativecommons.org/licenses/by-nc-sa/4.0/ shields: https://img.shields.io/badge/Copyright-BY--NC--SA%204.0-d42328?style=for-the-badge\u0026amp;logo=Claris message: 本站采用知识共享署名-非商业性使用-相同方式共享4.0国际许可协议进行许可 swiper_css: https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.css swiper_js: https://npm.elemecdn.com/hexo-butterfly-swiper/lib/swiper.min.js swiperbdage_init_js: https://npm.elemecdn.com/hexo-butterfly-footer-beautify/lib/swiperbdage_init.min.js 日志自动分类插件 # Hexo写日志，通常我们都需要维护一个front-matter信息，包括title、date。博客多了，为了方便日志分类，一般还需要设置categories。\n比如下面的例子：\n--- title: Hexo简介 date: 2008-08-08 categories: - web开发 - 前端 - 博客框架 --- 本文介绍一种自动生成categories的插件 hexo-auto-category官方地址。\n对于博客 source/_post/web/framework/hexo.md，该插件会自动生成以下categories\ncategories: - web - framework 安装\nnpm install hexo-auto-category --save 配置 在站点根目录下的_config.yml添加：\n# Generate categories from directory-tree # Dependencies: https://github.com/xu-song/hexo-auto-category # depth: the depth of directory-tree you want to generate, should \u0026gt; 0 auto_category: enable: true depth: # 如果只想生成第一级目录分类，可以设置`depth`属性为 1 gulp 压缩静态资源 # gulp能够帮助用户自动压缩静态资源，配合各类下属插件，能够压缩包括css、js、html乃至各类格式的图片文件。（图片文件的压缩往往只能节省几十KB，效果远远不如imagine、tinypng等压缩方式，所以此处不再写使用gulp压缩图片的内容）\n安装Gulp插件：在博客根目录[Blogroot]打开终端，输入：\nnpm install --global gulp-cli #全局安装gulp指令集 npm install gulp --save #安装gulp插件 安装各个下属插件以实现对各类静态资源的压缩。\n压缩 HTML：\nnpm install gulp-htmlclean --save-dev npm install gulp-html-minifier-terser --save-dev # 用gulp-html-minifier-terser可以压缩HTML中的ES6语法 压缩 CSS：\nnpm install gulp-clean-css --save-dev 压缩 JS：\ngulp-terser只会直接压缩js代码，所以不存在因为语法变动导致的错误 。事实上，当我们使用jsdelivr的CDN服务时，只需要在css或者js的后缀前添加.min,例如example.js-\u0026gt;example.min.js,JsDelivr就会自动使用terser帮我们压缩好代码。\nnpm install gulp-terser --save-dev 压缩字体包\nnpm install gulp-fontmin --save-dev 为Gulp创建gulpfile.js任务脚本。在博客根目录[Blogroot]下新建gulpfile.js,打开[Blogroot]\\gulpfile.js,输入以下内容：\n//用到的各个插件 var gulp = require(\u0026#39;gulp\u0026#39;); var cleanCSS = require(\u0026#39;gulp-clean-css\u0026#39;); var htmlmin = require(\u0026#39;gulp-html-minifier-terser\u0026#39;); var htmlclean = require(\u0026#39;gulp-htmlclean\u0026#39;); var fontmin = require(\u0026#39;gulp-fontmin\u0026#39;); // gulp-tester var terser = require(\u0026#39;gulp-terser\u0026#39;); // 压缩js gulp.task(\u0026#39;compress\u0026#39;, async() =\u0026gt;{ gulp.src([\u0026#39;./public/**/*.js\u0026#39;, \u0026#39;!./public/**/*.min.js\u0026#39;]) .pipe(terser()) .pipe(gulp.dest(\u0026#39;./public\u0026#39;)) }); //压缩css gulp.task(\u0026#39;minify-css\u0026#39;, () =\u0026gt; { return gulp.src([\u0026#39;./public/**/*.css\u0026#39;]) .pipe(cleanCSS({ compatibility: \u0026#39;ie11\u0026#39; })) .pipe(gulp.dest(\u0026#39;./public\u0026#39;)); }); //压缩html gulp.task(\u0026#39;minify-html\u0026#39;, () =\u0026gt; { return gulp.src(\u0026#39;./public/**/*.html\u0026#39;) .pipe(htmlclean()) .pipe(htmlmin({ removeComments: true, //清除html注释 collapseWhitespace: true, //压缩html collapseBooleanAttributes: true, //省略布尔属性的值，例如：\u0026lt;input checked=\u0026#34;true\u0026#34;/\u0026gt; ==\u0026gt; \u0026lt;input /\u0026gt; removeEmptyAttributes: true, //删除所有空格作属性值，例如：\u0026lt;input id=\u0026#34;\u0026#34; /\u0026gt; ==\u0026gt; \u0026lt;input /\u0026gt; removeScriptTypeAttributes: true, //删除\u0026lt;script\u0026gt;的type=\u0026#34;text/javascript\u0026#34; removeStyleLinkTypeAttributes: true, //删除\u0026lt;style\u0026gt;和\u0026lt;link\u0026gt;的 type=\u0026#34;text/css\u0026#34; minifyJS: true, //压缩页面 JS minifyCSS: true, //压缩页面 CSS minifyURLs: true //压缩页面URL })) .pipe(gulp.dest(\u0026#39;./public\u0026#39;)) }); //压缩字体 function minifyFont(text, cb) { gulp .src(\u0026#39;./public/fonts/*.ttf\u0026#39;) //原字体所在目录 .pipe(fontmin({ text: text })) .pipe(gulp.dest(\u0026#39;./public/fontsdest/\u0026#39;)) //压缩后的输出目录 .on(\u0026#39;end\u0026#39;, cb); } gulp.task(\u0026#39;mini-font\u0026#39;, (cb) =\u0026gt; { var buffers = []; gulp .src([\u0026#39;./public/**/*.html\u0026#39;]) //HTML文件所在目录请根据自身情况修改 .on(\u0026#39;data\u0026#39;, function(file) { buffers.push(file.contents); }) .on(\u0026#39;end\u0026#39;, function() { var text = Buffer.concat(buffers).toString(\u0026#39;utf-8\u0026#39;); minifyFont(text, cb); }); }); // 运行gulp命令时依次执行以下任务 gulp.task(\u0026#39;default\u0026#39;, gulp.parallel( \u0026#39;compress\u0026#39;, \u0026#39;minify-css\u0026#39;, \u0026#39;minify-html\u0026#39;,\u0026#39;mini-font\u0026#39; )) 魔改优化日记 # 合并CSS以减少请求次数 # 将魔改样式整合到index.css文件内，减少对服务器的请求次数。能够节省大量加载时间。\n我的做法如下：\n在 [Blogroot]\\themes\\butterfly\\source\\css\\ 路径下新建 _custom 文件夹，然后把魔改样式的CSS文件拖动进去。文件目录层级可以表示为以下情况：\nsource |__ css |__ _custom |__ custom1.css |__ custom2.css |__ custom3.css |__ index.styl 在 [Blogroot]\\themes\\butterfly\\source\\css\\index.styl 中新增一行代码: @import '_custom/*.css'，表示引入 _custom 文件夹下的所有CSS文件。\n@import \u0026#39;nib\u0026#39; @import \u0026#39;_third-party/*.css\u0026#39; + @import \u0026#39;_custom/*.css\u0026#39; // project @import \u0026#39;var\u0026#39; @import \u0026#39;_global/*\u0026#39; 博客使用一图流 # 去除背景配置 # 打开主题配置文件（注意：不是博客配置文件）_config.yml，按 Ctrl+F 快捷键弹出搜索框，输入 banner 关键词，将以下图片链接去掉。修改如下配置项：\n# Disable all banner image disable_top_img: false # The banner image of home page index_img: # If the banner of page not setting, it will show the top_img default_top_img: transparent # The banner image of archive page archive_img: # If the banner of tag page not setting, it will show the top_img # note: tag page, not tags page (子標籤頁面的 top_img) tag_img: # The banner image of tag page # format: # - tag name: xxxxx tag_per_img: # If the banner of category page not setting, it will show the top_img # note: category page, not categories page (子分類頁面的 top_img) category_img: # The banner image of category page # format: # - category name: xxxxx category_per_img: 搜索关键词 background, 将颜色设置为：\n# Website Background (設置網站背景) # can set it to color or image (可設置圖片 或者 顔色) # The formal of image: url(http://xxxxxx.com/xxx.jpg) background: url(/img/banner.jpg) # 修改为自己的图片 # Footer Background footer_bg: transparent 引入魔改样式，修改 CSS 样式 # 以 butterfly 主题为例，可以在 [Blogroot]\\themes\\butterfly\\source\\css\\ 目录下新建 custom.css 文件，然后在 _config.butterfly.yml 的 inject 配置项中引入自定义样式文件。\ninject: head: - \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;/css/custom.css\u0026#34; media=\u0026#34;defer\u0026#34; onload=\u0026#34;this.media=\u0026#39;all\u0026#39;\u0026#34;\u0026gt; 其中 media=\u0026quot;defer\u0026quot; onload=\u0026quot;this.media='all'\u0026quot; 是异步加载配置项，确保自定义样式会在页面加载完成后才继续渲染。如果没有需求或效果不好可以不加这个。\n我的博客一图流 css 样式设置如下，修改 custom.css 文件：\n/* 首页文章卡片 */ #recent-posts \u0026gt; .recent-post-item {background: rgba(255, 255, 255, 0.85);} /* 首页侧栏卡片 */ .card-widget {background: rgba(255, 255, 255, 0.85) !important;} /* 文章页面正文背景 */ div#post {background: rgba(255, 255, 255, 0.85);} /* 分页页面 */ div#page {background: rgba(255, 255, 255, 0.85);} /* 归档页面 */ div#archive {background: rgba(255, 255, 255, 0.85);} /* 标签页面 */ div#tag {background: rgba(255, 255, 255, 0.85);} /* 分类页面 */ div#category {background: rgba(255, 255, 255, 0.85);} #footer {opacity: 0.5;} /* 页脚透明 */ #footer {background: transparent !important;} /* 页脚黑色透明玻璃效果移除 */ #footer::before {background: transparent !important;} /* 头图透明 */ #page-header {background: transparent !important;} /*top-img黑色透明玻璃效果移除，不建议加，除非你执着于完全一图流或者背景图对比色明显 */ #page-header.post-bg:before {background-color: transparent !important;} /*阅读模式修改*/ .read-mode #aside-content .card-widget {background: rgba(158, 204, 171, 0.5) !important;} .read-mode div#post {background: rgba(158, 204, 171, 0.5) !important;} /*夜间模式修改*/ /*夜间模式伪类遮罩层透明*/ [data-theme=\u0026#34;dark\u0026#34;] #footer::before {background: transparent !important;} [data-theme=\u0026#34;dark\u0026#34;] #page-header::before {background: transparent !important;} /* 首页文章卡片 */ [data-theme=\u0026#34;dark\u0026#34;] #recent-posts \u0026gt; .recent-post-item {background: rgba(0, 0, 0, 0.5) !important;} /* 头图透明 */ [data-theme=\u0026#34;dark\u0026#34;] #aside-content .card-widget {background: rgba(0, 0, 0, 0.5) !important;} /* 文章页面正文背景 */ [data-theme=\u0026#34;dark\u0026#34;] div#post {background: rgba(0, 0, 0, 0.5) !important;} [data-theme=\u0026#34;dark\u0026#34;] div#archive {background: rgba(0, 0, 0, 0.5) !important;} [data-theme=\u0026#34;dark\u0026#34;] div#category {background: rgba(0, 0, 0, 0.5) !important;} [data-theme=\u0026#34;dark\u0026#34;] div#page {background: rgba(0, 0, 0, 0.5) !important;} /*夜间阅读模式*/ [data-theme=\u0026#34;dark\u0026#34;] .read-mode #aside-content .card-widget {background: rgba(0, 0, 0, 0.5) !important;color: #ffffff;} [data-theme=\u0026#34;dark\u0026#34;] .read-mode div#post {background: rgba(0, 0, 0, 0.5) !important;color: #ffffff;} 主题升级 # 进入 [Blogroot]/themes ，打开终端，输入：\ngit pull 之后打开 Butterfly 主题 GitHub Release 页面\n选择更新之前的版本，进入版本比对视图\n向下滚动找到 _config.yml 的对比视图，并根据其更改调整自己的主题配置文件 _config.butterfly.yml\n","date":"2022年12月30日","externalUrl":null,"permalink":"/zh-cn/posts/hexo-+-butterfly-%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%97%A5%E8%AE%B0/","section":"Posts","summary":"\u003cblockquote\u003e\n\u003cp\u003e全记录，旨在能够找到回家的路。\u003c/p\u003e\u003c/blockquote\u003e\n\n\u003ch2 class=\"relative group\"\u003e环境配置\n    \u003cdiv id=\"环境配置\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"text-primary-300 dark:text-neutral-700 !no-underline\" href=\"#%e7%8e%af%e5%a2%83%e9%85%8d%e7%bd%ae\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e\n    \n\u003c/h2\u003e\n\u003cp\u003eHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 \u003ca\n  href=\"http://daringfireball.net/projects/markdown/\"\n    target=\"_blank\"\n  \u003eMarkdown\u003c/a\u003e（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n安装 Hexo 相当简单，只需要先安装下列应用程序即可：\u003c/p\u003e","title":"Hexo + Butterfly 博客搭建日记","type":"posts"},{"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start # Create a new post # $ hexo new \u0026#34;My New Post\u0026#34; More info: Writing\nRun server # $ hexo server More info: Server\nGenerate static files # $ hexo generate More info: Generating\nDeploy to remote sites # $ hexo deploy More info: Deployment\n","date":"2022年2月7日","externalUrl":null,"permalink":"/zh-cn/posts/hello-world/","section":"Posts","summary":"\u003cp\u003eWelcome to \u003ca\n  href=\"https://hexo.io/\"\n    target=\"_blank\"\n  \u003eHexo\u003c/a\u003e! This is your very first post. Check \u003ca\n  href=\"https://hexo.io/docs/\"\n    target=\"_blank\"\n  \u003edocumentation\u003c/a\u003e for more info. If you get any problems when using Hexo, you can find the answer in \u003ca\n  href=\"https://hexo.io/docs/troubleshooting.html\"\n    target=\"_blank\"\n  \u003etroubleshooting\u003c/a\u003e or you can ask me on \u003ca\n  href=\"https://github.com/hexojs/hexo/issues\"\n    target=\"_blank\"\n  \u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n\n\u003ch2 class=\"relative group\"\u003eQuick Start\n    \u003cdiv id=\"quick-start\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"text-primary-300 dark:text-neutral-700 !no-underline\" href=\"#quick-start\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e\n    \n\u003c/h2\u003e\n\n\u003ch3 class=\"relative group\"\u003eCreate a new post\n    \u003cdiv id=\"create-a-new-post\" class=\"anchor\"\u003e\u003c/div\u003e\n    \n    \u003cspan\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 -start-6 not-prose group-hover:opacity-100 select-none\"\u003e\n        \u003ca class=\"text-primary-300 dark:text-neutral-700 !no-underline\" href=\"#create-a-new-post\" aria-label=\"锚点\"\u003e#\u003c/a\u003e\n    \u003c/span\u003e\n    \n\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e$ hexo new \u003cspan class=\"s2\"\u003e\u0026#34;My New Post\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eMore info: \u003ca\n  href=\"https://hexo.io/docs/writing.html\"\n    target=\"_blank\"\n  \u003eWriting\u003c/a\u003e\u003c/p\u003e","title":"Hello World","type":"posts"},{"content":"asdasd\nOpen in Bilibili\rtest bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili\n","date":"February 7 2022","externalUrl":null,"permalink":"/en/posts/new-post/","section":"Posts","summary":"\u003cp\u003easdasd\u003c/p\u003e\n\u003cdiv style=\"text-align: center\"\u003e\r\n  \u003ciframe\r\n    src=\"https://player.bilibili.com/player.html?bvid=BV1Zt421571J\u0026page=1\u0026as_wide=1\u0026high_quality=1\u0026autoplay=0\"\r\n    width=\"100%\"\r\n    height=\"350\"\r\n    scrolling=\"no\"\r\n    border=\"0\"\r\n    frameborder=\"no\"\r\n    framespacing=\"0\"\r\n    allowfullscreen=\"true\"\r\n    style=\"border-radius: 10px\"\r\n    sandbox=\"allow-top-navigation allow-same-origin  allow-forms allow-scripts\"\r\n  \u003e\r\n  \u003c/iframe\u003e\r\n\r\n  \u003cbutton\r\n    id=\"openUrlButton\"\r\n    style=\"\r\n      background-color: #f69;\r\n      color: white;\r\n      border: none;\r\n      padding: 10px 20px;\r\n      border-radius: 5px;\r\n      margin-top: 10px;\r\n    \"\r\n  \u003e\r\n    Open in Bilibili\r\n  \u003c/button\u003e\r\n\u003c/div\u003e\r\n\u003cscript\u003e\r\n  \r\n  var button = document.getElementById(\"openUrlButton\");\r\n\r\n  \r\n  button.addEventListener(\"click\", function () {\r\n    \r\n    var bvid = \"BV1Zt421571J\";\r\n\r\n    \r\n    window.open(\"https://bilibili.com/\" + bvid);\r\n  });\r\n\u003c/script\u003e\r\n\n\u003cp\u003etest bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili test bili\u003c/p\u003e","title":"Hello World","type":"posts"},{"content":"","externalUrl":null,"permalink":"/zh-cn/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","externalUrl":null,"permalink":"/zh-cn/series/","section":"Series","summary":"","title":"Series","type":"series"}]